/* Generated by Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os) */

(* src = "booth.v:5.1-10.10" *)
module adder_17(A, B, Y);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  (* src = "booth.v:6.26-6.27" *)
  input [16:0] A;
  wire [16:0] A;
  (* src = "booth.v:6.29-6.30" *)
  input [16:0] B;
  wire [16:0] B;
  (* src = "booth.v:7.26-7.27" *)
  output [16:0] Y;
  wire [16:0] Y;
  assign Y[0] = B[0] ^ A[0];
  assign _055_ = B[1] ^ A[1];
  assign _056_ = ~(B[0] & A[0]);
  assign Y[1] = ~(_056_ ^ _055_);
  assign _057_ = ~(B[2] ^ A[2]);
  assign _058_ = B[1] & A[1];
  assign _059_ = _055_ & ~(_056_);
  assign _060_ = _059_ | _058_;
  assign Y[2] = ~(_060_ ^ _057_);
  assign _061_ = ~(B[3] ^ A[3]);
  assign _062_ = ~(B[2] & A[2]);
  assign _063_ = _060_ & ~(_057_);
  assign _064_ = _062_ & ~(_063_);
  assign Y[3] = _064_ ^ _061_;
  assign _065_ = ~(B[4] ^ A[4]);
  assign _066_ = B[3] & A[3];
  assign _067_ = ~(_062_ | _061_);
  assign _068_ = _067_ | _066_;
  assign _069_ = _061_ | _057_;
  assign _070_ = _060_ & ~(_069_);
  assign _071_ = _070_ | _068_;
  assign Y[4] = ~(_071_ ^ _065_);
  assign _072_ = ~(B[5] ^ A[5]);
  assign _073_ = ~(B[4] & A[4]);
  assign _074_ = _071_ & ~(_065_);
  assign _075_ = _073_ & ~(_074_);
  assign Y[5] = _075_ ^ _072_;
  assign _076_ = ~(B[6] ^ A[6]);
  assign _077_ = B[5] & A[5];
  assign _078_ = ~(_073_ | _072_);
  assign _079_ = _078_ | _077_;
  assign _080_ = _072_ | _065_;
  assign _081_ = _080_ | ~(_071_);
  assign _082_ = _081_ & ~(_079_);
  assign Y[6] = _082_ ^ _076_;
  assign _083_ = ~(B[7] ^ A[7]);
  assign _084_ = ~(B[6] & A[6]);
  assign _085_ = ~(_082_ | _076_);
  assign _086_ = _084_ & ~(_085_);
  assign Y[7] = _086_ ^ _083_;
  assign _087_ = ~(B[8] ^ A[8]);
  assign _088_ = B[7] & A[7];
  assign _089_ = ~(_084_ | _083_);
  assign _090_ = _089_ | _088_;
  assign _091_ = _083_ | _076_;
  assign _092_ = _079_ & ~(_091_);
  assign _093_ = _092_ | _090_;
  assign _094_ = _091_ | _080_;
  assign _000_ = _071_ & ~(_094_);
  assign _001_ = _000_ | _093_;
  assign Y[8] = ~(_001_ ^ _087_);
  assign _002_ = ~(B[9] ^ A[9]);
  assign _003_ = ~(B[8] & A[8]);
  assign _004_ = _001_ & ~(_087_);
  assign _005_ = _003_ & ~(_004_);
  assign Y[9] = _005_ ^ _002_;
  assign _006_ = ~(B[10] ^ A[10]);
  assign _007_ = B[9] & A[9];
  assign _008_ = ~(_003_ | _002_);
  assign _009_ = _008_ | _007_;
  assign _010_ = _002_ | _087_;
  assign _011_ = _010_ | ~(_001_);
  assign _012_ = _011_ & ~(_009_);
  assign Y[10] = _012_ ^ _006_;
  assign _013_ = ~(B[11] ^ A[11]);
  assign _014_ = ~(B[10] & A[10]);
  assign _015_ = ~(_012_ | _006_);
  assign _016_ = _014_ & ~(_015_);
  assign Y[11] = _016_ ^ _013_;
  assign _017_ = ~(B[12] ^ A[12]);
  assign _018_ = B[11] & A[11];
  assign _019_ = ~(_014_ | _013_);
  assign _020_ = _019_ | _018_;
  assign _021_ = _013_ | _006_;
  assign _022_ = _009_ & ~(_021_);
  assign _023_ = _022_ | _020_;
  assign _024_ = _021_ | _010_;
  assign _025_ = _001_ & ~(_024_);
  assign _026_ = ~(_025_ | _023_);
  assign Y[12] = _026_ ^ _017_;
  assign _027_ = ~(B[13] ^ A[13]);
  assign _028_ = ~(B[12] & A[12]);
  assign _029_ = ~(_026_ | _017_);
  assign _030_ = _028_ & ~(_029_);
  assign Y[13] = _030_ ^ _027_;
  assign _031_ = ~(B[14] ^ A[14]);
  assign _032_ = B[13] & A[13];
  assign _033_ = ~(_028_ | _027_);
  assign _034_ = ~(_033_ | _032_);
  assign _035_ = _027_ | _017_;
  assign _036_ = ~(_035_ | _026_);
  assign _037_ = _034_ & ~(_036_);
  assign Y[14] = _037_ ^ _031_;
  assign _038_ = ~(B[15] ^ A[15]);
  assign _039_ = ~(B[14] & A[14]);
  assign _040_ = ~(_037_ | _031_);
  assign _041_ = _039_ & ~(_040_);
  assign Y[15] = _041_ ^ _038_;
  assign _042_ = ~(B[16] ^ A[16]);
  assign _043_ = ~(B[15] & A[15]);
  assign _044_ = ~(_039_ | _038_);
  assign _045_ = _043_ & ~(_044_);
  assign _046_ = _038_ | _031_;
  assign _047_ = ~(_046_ | _034_);
  assign _048_ = _045_ & ~(_047_);
  assign _049_ = _046_ | _035_;
  assign _050_ = _023_ & ~(_049_);
  assign _051_ = _048_ & ~(_050_);
  assign _052_ = _049_ | _024_;
  assign _053_ = _001_ & ~(_052_);
  assign _054_ = _051_ & ~(_053_);
  assign Y[16] = _054_ ^ _042_;
endmodule

(* top =  1  *)
(* src = "booth.v:81.1-107.10" *)
module booth(multiplicand, multiplier, product);
  (* src = "booth.v:87.24-87.30" *)
  wire [8:0] \mplier[0] ;
  (* src = "booth.v:87.24-87.30" *)
  wire [8:0] \mplier[1] ;
  (* src = "booth.v:87.24-87.30" *)
  wire [8:0] \mplier[2] ;
  (* src = "booth.v:87.24-87.30" *)
  wire [8:0] \mplier[3] ;
  (* src = "booth.v:87.24-87.30" *)
  wire [8:0] \mplier[4] ;
  (* src = "booth.v:87.24-87.30" *)
  wire [8:0] \mplier[5] ;
  (* src = "booth.v:87.24-87.30" *)
  wire [8:0] \mplier[6] ;
  (* src = "booth.v:87.24-87.30" *)
  wire [8:0] \mplier[7] ;
  (* src = "booth.v:87.24-87.30" *)
  (* unused_bits = "0 1 2 3 4 5 6 7 8" *)
  wire [8:0] \mplier[8] ;
  (* src = "booth.v:82.25-82.37" *)
  input [7:0] multiplicand;
  wire [7:0] multiplicand;
  (* src = "booth.v:83.25-83.35" *)
  input [7:0] multiplier;
  wire [7:0] multiplier;
  (* src = "booth.v:86.24-86.28" *)
  wire [16:0] \prod[0] ;
  (* src = "booth.v:86.24-86.28" *)
  wire [16:0] \prod[1] ;
  (* src = "booth.v:86.24-86.28" *)
  wire [16:0] \prod[2] ;
  (* src = "booth.v:86.24-86.28" *)
  wire [16:0] \prod[3] ;
  (* src = "booth.v:86.24-86.28" *)
  wire [16:0] \prod[4] ;
  (* src = "booth.v:86.24-86.28" *)
  wire [16:0] \prod[5] ;
  (* src = "booth.v:86.24-86.28" *)
  wire [16:0] \prod[6] ;
  (* src = "booth.v:86.24-86.28" *)
  wire [16:0] \prod[7] ;
  (* src = "booth.v:86.24-86.28" *)
  (* unused_bits = "16" *)
  wire [16:0] \prod[8] ;
  (* src = "booth.v:84.26-84.33" *)
  output [15:0] product;
  wire [15:0] product;
  (* module_not_derived = 32'd1 *)
  (* src = "booth.v:95.26-102.14" *)
  booth_step_8 \booth_steps[0].step_inst  (
    .i(32'd0),
    .mcand(multiplicand),
    .mplier({ multiplier, 1'h0 }),
    .mplier_out(\mplier[1] ),
    .prod_in(17'h00000),
    .prod_out(\prod[1] )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "booth.v:95.26-102.14" *)
  booth_step_8 \booth_steps[1].step_inst  (
    .i(32'd1),
    .mcand(multiplicand),
    .mplier(\mplier[1] ),
    .mplier_out(\mplier[2] ),
    .prod_in(\prod[1] ),
    .prod_out(\prod[2] )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "booth.v:95.26-102.14" *)
  booth_step_8 \booth_steps[2].step_inst  (
    .i(32'd2),
    .mcand(multiplicand),
    .mplier(\mplier[2] ),
    .mplier_out(\mplier[3] ),
    .prod_in(\prod[2] ),
    .prod_out(\prod[3] )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "booth.v:95.26-102.14" *)
  booth_step_8 \booth_steps[3].step_inst  (
    .i(32'd3),
    .mcand(multiplicand),
    .mplier(\mplier[3] ),
    .mplier_out(\mplier[4] ),
    .prod_in(\prod[3] ),
    .prod_out(\prod[4] )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "booth.v:95.26-102.14" *)
  booth_step_8 \booth_steps[4].step_inst  (
    .i(32'd4),
    .mcand(multiplicand),
    .mplier(\mplier[4] ),
    .mplier_out(\mplier[5] ),
    .prod_in(\prod[4] ),
    .prod_out(\prod[5] )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "booth.v:95.26-102.14" *)
  booth_step_8 \booth_steps[5].step_inst  (
    .i(32'd5),
    .mcand(multiplicand),
    .mplier(\mplier[5] ),
    .mplier_out(\mplier[6] ),
    .prod_in(\prod[5] ),
    .prod_out(\prod[6] )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "booth.v:95.26-102.14" *)
  booth_step_8 \booth_steps[6].step_inst  (
    .i(32'd6),
    .mcand(multiplicand),
    .mplier(\mplier[6] ),
    .mplier_out(\mplier[7] ),
    .prod_in(\prod[6] ),
    .prod_out(\prod[7] )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "booth.v:95.26-102.14" *)
  booth_step_8 \booth_steps[7].step_inst  (
    .i(32'd7),
    .mcand(multiplicand),
    .mplier(\mplier[7] ),
    .mplier_out(\mplier[8] ),
    .prod_in(\prod[7] ),
    .prod_out(\prod[8] )
  );
  assign \mplier[0]  = { multiplier, 1'h0 };
  assign \prod[0]  = 17'h00000;
  assign product = \prod[8] [15:0];
endmodule

(* src = "booth.v:39.1-76.10" *)
module booth_step_8(mcand, mplier, prod_in, i, prod_out, mplier_out);
  (* src = "booth.v:48.24-48.31" *)
  wire [16:0] add_res;
  (* src = "booth.v:43.26-43.27" *)
  input [31:0] i;
  wire [31:0] i;
  (* src = "booth.v:40.26-40.31" *)
  input [7:0] mcand;
  wire [7:0] mcand;
  (* src = "booth.v:41.26-41.32" *)
  input [8:0] mplier;
  wire [8:0] mplier;
  (* src = "booth.v:45.26-45.36" *)
  output [8:0] mplier_out;
  wire [8:0] mplier_out;
  (* src = "booth.v:42.26-42.33" *)
  input [16:0] prod_in;
  wire [16:0] prod_in;
  (* src = "booth.v:44.26-44.34" *)
  output [16:0] prod_out;
  wire [16:0] prod_out;
  (* src = "booth.v:48.42-48.53" *)
  wire [16:0] selected_op;
  (* src = "booth.v:47.24-47.37" *)
  wire [7:0] shifted_mcand;
  (* src = "booth.v:48.33-48.40" *)
  wire [16:0] sub_res;
  (* module_not_derived = 32'd1 *)
  (* src = "booth.v:54.14-58.6" *)
  adder_17 add_inst (
    .A(prod_in),
    .B({ shifted_mcand[7], shifted_mcand[7], shifted_mcand[7], shifted_mcand[7], shifted_mcand[7], shifted_mcand[7], shifted_mcand[7], shifted_mcand[7], shifted_mcand[7], shifted_mcand }),
    .Y(add_res)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "booth.v:66.13-72.6" *)
  mux3_17 mux_inst (
    .A(add_res),
    .B(sub_res),
    .C(prod_in),
    .Y(selected_op),
    .sel(mplier[1:0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "booth.v:50.11-52.6" *)
  shl_8 sh_inst (
    .A(mcand),
    .SHAMT(i),
    .Y(shifted_mcand)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "booth.v:60.19-64.6" *)
  subtractor_17 sub_inst (
    .A(prod_in),
    .B({ shifted_mcand[7], shifted_mcand[7], shifted_mcand[7], shifted_mcand[7], shifted_mcand[7], shifted_mcand[7], shifted_mcand[7], shifted_mcand[7], shifted_mcand[7], shifted_mcand }),
    .Y(sub_res)
  );
  assign mplier_out = { mplier[8], mplier[8:1] };
  assign prod_out = selected_op;
endmodule

(* src = "booth.v:27.1-34.10" *)
module mux3_17(sel, A, B, C, Y);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  (* src = "booth.v:29.26-29.27" *)
  input [16:0] A;
  wire [16:0] A;
  (* src = "booth.v:29.29-29.30" *)
  input [16:0] B;
  wire [16:0] B;
  (* src = "booth.v:29.32-29.33" *)
  input [16:0] C;
  wire [16:0] C;
  (* src = "booth.v:30.26-30.27" *)
  output [16:0] Y;
  wire [16:0] Y;
  (* src = "booth.v:28.18-28.21" *)
  input [1:0] sel;
  wire [1:0] sel;
  assign _03_ = sel[0] & ~(sel[1]);
  assign _04_ = sel[1] & ~(sel[0]);
  assign _05_ = _04_ ? B[0] : C[0];
  assign Y[0] = _03_ ? A[0] : _05_;
  assign _06_ = _04_ ? B[1] : C[1];
  assign Y[1] = _03_ ? A[1] : _06_;
  assign _07_ = _04_ ? B[2] : C[2];
  assign Y[2] = _03_ ? A[2] : _07_;
  assign _08_ = _04_ ? B[3] : C[3];
  assign Y[3] = _03_ ? A[3] : _08_;
  assign _09_ = _04_ ? B[4] : C[4];
  assign Y[4] = _03_ ? A[4] : _09_;
  assign _10_ = _04_ ? B[5] : C[5];
  assign Y[5] = _03_ ? A[5] : _10_;
  assign _11_ = _04_ ? B[6] : C[6];
  assign Y[6] = _03_ ? A[6] : _11_;
  assign _12_ = _04_ ? B[7] : C[7];
  assign Y[7] = _03_ ? A[7] : _12_;
  assign _13_ = _04_ ? B[8] : C[8];
  assign Y[8] = _03_ ? A[8] : _13_;
  assign _14_ = _04_ ? B[9] : C[9];
  assign Y[9] = _03_ ? A[9] : _14_;
  assign _15_ = _04_ ? B[10] : C[10];
  assign Y[10] = _03_ ? A[10] : _15_;
  assign _16_ = _04_ ? B[11] : C[11];
  assign Y[11] = _03_ ? A[11] : _16_;
  assign _17_ = _04_ ? B[12] : C[12];
  assign Y[12] = _03_ ? A[12] : _17_;
  assign _18_ = _04_ ? B[13] : C[13];
  assign Y[13] = _03_ ? A[13] : _18_;
  assign _00_ = _04_ ? B[14] : C[14];
  assign Y[14] = _03_ ? A[14] : _00_;
  assign _01_ = _04_ ? B[15] : C[15];
  assign Y[15] = _03_ ? A[15] : _01_;
  assign _02_ = _04_ ? B[16] : C[16];
  assign Y[16] = _03_ ? A[16] : _02_;
endmodule

(* src = "booth.v:19.1-25.10" *)
module shl_8(A, SHAMT, Y);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  (* src = "booth.v:20.25-20.26" *)
  input [7:0] A;
  wire [7:0] A;
  (* src = "booth.v:21.25-21.30" *)
  input [31:0] SHAMT;
  wire [31:0] SHAMT;
  (* src = "booth.v:22.25-22.26" *)
  output [7:0] Y;
  wire [7:0] Y;
  assign _013_ = ~SHAMT[3];
  assign _014_ = SHAMT[5] | SHAMT[4];
  assign _015_ = SHAMT[7] | SHAMT[6];
  assign _016_ = _015_ | _014_;
  assign _017_ = SHAMT[9] | SHAMT[8];
  assign _018_ = SHAMT[11] | SHAMT[10];
  assign _019_ = _018_ | _017_;
  assign _020_ = _019_ | _016_;
  assign _021_ = SHAMT[13] | SHAMT[12];
  assign _022_ = SHAMT[15] | SHAMT[14];
  assign _023_ = _022_ | _021_;
  assign _024_ = SHAMT[17] | SHAMT[16];
  assign _025_ = SHAMT[19] | SHAMT[18];
  assign _026_ = _025_ | _024_;
  assign _027_ = _026_ | _023_;
  assign _028_ = _027_ | _020_;
  assign _029_ = SHAMT[21] | SHAMT[20];
  assign _030_ = SHAMT[23] | SHAMT[22];
  assign _031_ = _030_ | _029_;
  assign _032_ = SHAMT[25] | SHAMT[24];
  assign _033_ = SHAMT[27] | SHAMT[26];
  assign _034_ = _033_ | _032_;
  assign _035_ = _034_ | _031_;
  assign _036_ = SHAMT[29] | SHAMT[28];
  assign _037_ = SHAMT[31] | SHAMT[30];
  assign _038_ = _037_ | _036_;
  assign _039_ = _038_ | _035_;
  assign _040_ = _039_ | _028_;
  assign _041_ = _040_ | ~(A[0]);
  assign _042_ = _041_ | SHAMT[0];
  assign _043_ = _042_ | SHAMT[1];
  assign _044_ = _043_ | SHAMT[2];
  assign Y[0] = _013_ & ~(_044_);
  assign _045_ = _040_ | ~(A[1]);
  assign _046_ = SHAMT[0] ? _041_ : _045_;
  assign _047_ = _046_ | SHAMT[1];
  assign _048_ = _047_ | SHAMT[2];
  assign Y[1] = _013_ & ~(_048_);
  assign _049_ = _040_ | ~(A[2]);
  assign _050_ = SHAMT[0] ? _045_ : _049_;
  assign _051_ = SHAMT[1] ? _042_ : _050_;
  assign _052_ = _051_ | SHAMT[2];
  assign Y[2] = _013_ & ~(_052_);
  assign _053_ = _040_ | ~(A[3]);
  assign _054_ = SHAMT[0] ? _049_ : _053_;
  assign _055_ = SHAMT[1] ? _046_ : _054_;
  assign _056_ = _055_ | SHAMT[2];
  assign Y[3] = _013_ & ~(_056_);
  assign _057_ = _040_ | ~(A[4]);
  assign _058_ = SHAMT[0] ? _053_ : _057_;
  assign _059_ = SHAMT[1] ? _050_ : _058_;
  assign _000_ = SHAMT[2] ? _043_ : _059_;
  assign Y[4] = _013_ & ~(_000_);
  assign _001_ = _040_ | ~(A[5]);
  assign _002_ = SHAMT[0] ? _057_ : _001_;
  assign _003_ = SHAMT[1] ? _054_ : _002_;
  assign _004_ = SHAMT[2] ? _047_ : _003_;
  assign Y[5] = _013_ & ~(_004_);
  assign _005_ = _040_ | ~(A[6]);
  assign _006_ = SHAMT[0] ? _001_ : _005_;
  assign _007_ = SHAMT[1] ? _058_ : _006_;
  assign _008_ = SHAMT[2] ? _051_ : _007_;
  assign Y[6] = _013_ & ~(_008_);
  assign _009_ = _040_ | ~(A[7]);
  assign _010_ = SHAMT[0] ? _005_ : _009_;
  assign _011_ = SHAMT[1] ? _002_ : _010_;
  assign _012_ = SHAMT[2] ? _055_ : _011_;
  assign Y[7] = _013_ & ~(_012_);
endmodule

(* src = "booth.v:12.1-17.10" *)
module subtractor_17(A, B, Y);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  (* src = "booth.v:13.26-13.27" *)
  input [16:0] A;
  wire [16:0] A;
  (* src = "booth.v:13.29-13.30" *)
  input [16:0] B;
  wire [16:0] B;
  (* src = "booth.v:14.26-14.27" *)
  output [16:0] Y;
  wire [16:0] Y;
  assign _006_ = A[10] ^ B[10];
  assign _007_ = A[9] & ~(B[9]);
  assign _008_ = ~(_003_ | _002_);
  assign _009_ = _008_ | _007_;
  assign _010_ = _002_ | _087_;
  assign _011_ = _010_ | ~(_001_);
  assign _012_ = _011_ & ~(_009_);
  assign Y[10] = _012_ ^ _006_;
  assign _013_ = A[11] ^ B[11];
  assign _014_ = B[10] | ~(A[10]);
  assign _015_ = ~(_012_ | _006_);
  assign _016_ = _014_ & ~(_015_);
  assign Y[11] = _016_ ^ _013_;
  assign _017_ = A[12] ^ B[12];
  assign _018_ = A[11] & ~(B[11]);
  assign _019_ = ~(_014_ | _013_);
  assign _020_ = _019_ | _018_;
  assign _021_ = _013_ | _006_;
  assign _022_ = _009_ & ~(_021_);
  assign _023_ = _022_ | _020_;
  assign _024_ = _021_ | _010_;
  assign _025_ = _001_ & ~(_024_);
  assign _026_ = ~(_025_ | _023_);
  assign Y[12] = _026_ ^ _017_;
  assign _027_ = A[13] ^ B[13];
  assign _028_ = B[12] | ~(A[12]);
  assign _029_ = ~(_026_ | _017_);
  assign _030_ = _028_ & ~(_029_);
  assign Y[13] = _030_ ^ _027_;
  assign _031_ = A[14] ^ B[14];
  assign _032_ = A[13] & ~(B[13]);
  assign _033_ = ~(_028_ | _027_);
  assign _034_ = ~(_033_ | _032_);
  assign _035_ = _027_ | _017_;
  assign _036_ = ~(_035_ | _026_);
  assign _037_ = _034_ & ~(_036_);
  assign Y[14] = _037_ ^ _031_;
  assign _038_ = A[15] ^ B[15];
  assign _039_ = B[14] | ~(A[14]);
  assign _040_ = ~(_037_ | _031_);
  assign _041_ = _039_ & ~(_040_);
  assign Y[15] = _041_ ^ _038_;
  assign _042_ = A[16] ^ B[16];
  assign _043_ = B[15] | ~(A[15]);
  assign _044_ = ~(_039_ | _038_);
  assign _045_ = _043_ & ~(_044_);
  assign _046_ = _038_ | _031_;
  assign _047_ = ~(_046_ | _034_);
  assign _048_ = _045_ & ~(_047_);
  assign _049_ = _046_ | _035_;
  assign _050_ = _023_ & ~(_049_);
  assign _051_ = _048_ & ~(_050_);
  assign _052_ = _049_ | _024_;
  assign _053_ = _001_ & ~(_052_);
  assign _054_ = _051_ & ~(_053_);
  assign Y[16] = _054_ ^ _042_;
  assign Y[0] = A[0] ^ B[0];
  assign _055_ = ~(A[1] ^ B[1]);
  assign _056_ = B[0] & ~(A[0]);
  assign Y[1] = ~(_056_ ^ _055_);
  assign _057_ = A[2] ^ B[2];
  assign _058_ = A[1] & ~(B[1]);
  assign _059_ = _055_ & ~(_056_);
  assign _060_ = _059_ | _058_;
  assign Y[2] = ~(_060_ ^ _057_);
  assign _061_ = A[3] ^ B[3];
  assign _062_ = B[2] | ~(A[2]);
  assign _063_ = _060_ & ~(_057_);
  assign _064_ = _062_ & ~(_063_);
  assign Y[3] = _064_ ^ _061_;
  assign _065_ = A[4] ^ B[4];
  assign _066_ = A[3] & ~(B[3]);
  assign _067_ = ~(_062_ | _061_);
  assign _068_ = _067_ | _066_;
  assign _069_ = _061_ | _057_;
  assign _070_ = _060_ & ~(_069_);
  assign _071_ = _070_ | _068_;
  assign Y[4] = ~(_071_ ^ _065_);
  assign _072_ = A[5] ^ B[5];
  assign _073_ = B[4] | ~(A[4]);
  assign _074_ = _071_ & ~(_065_);
  assign _075_ = _073_ & ~(_074_);
  assign Y[5] = _075_ ^ _072_;
  assign _076_ = A[6] ^ B[6];
  assign _077_ = A[5] & ~(B[5]);
  assign _078_ = ~(_073_ | _072_);
  assign _079_ = _078_ | _077_;
  assign _080_ = _072_ | _065_;
  assign _081_ = _080_ | ~(_071_);
  assign _082_ = _081_ & ~(_079_);
  assign Y[6] = _082_ ^ _076_;
  assign _083_ = A[7] ^ B[7];
  assign _084_ = B[6] | ~(A[6]);
  assign _085_ = ~(_082_ | _076_);
  assign _086_ = _084_ & ~(_085_);
  assign Y[7] = _086_ ^ _083_;
  assign _087_ = A[8] ^ B[8];
  assign _088_ = A[7] & ~(B[7]);
  assign _089_ = ~(_084_ | _083_);
  assign _090_ = _089_ | _088_;
  assign _091_ = _083_ | _076_;
  assign _092_ = _079_ & ~(_091_);
  assign _093_ = _092_ | _090_;
  assign _094_ = _091_ | _080_;
  assign _000_ = _071_ & ~(_094_);
  assign _001_ = _000_ | _093_;
  assign Y[8] = ~(_001_ ^ _087_);
  assign _002_ = A[9] ^ B[9];
  assign _003_ = B[8] | ~(A[8]);
  assign _004_ = _001_ & ~(_087_);
  assign _005_ = _003_ & ~(_004_);
  assign Y[9] = _005_ ^ _002_;
endmodule
