/* Generated by Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os) */

(* dynports =  1  *)
(* src = "csa.v:8.1-13.10" *)
module and2(A, B, Y);
  (* src = "csa.v:9.24-9.25" *)
  input [15:0] A;
  wire [15:0] A;
  (* src = "csa.v:9.27-9.28" *)
  input [15:0] B;
  wire [15:0] B;
  (* src = "csa.v:10.24-10.25" *)
  output [15:0] Y;
  wire [15:0] Y;
  assign Y[0] = B[0] & A[0];
  assign Y[1] = B[1] & A[1];
  assign Y[2] = B[2] & A[2];
  assign Y[3] = B[3] & A[3];
  assign Y[4] = B[4] & A[4];
  assign Y[5] = B[5] & A[5];
  assign Y[6] = B[6] & A[6];
  assign Y[7] = B[7] & A[7];
  assign Y[8] = B[8] & A[8];
  assign Y[9] = B[9] & A[9];
  assign Y[10] = B[10] & A[10];
  assign Y[11] = B[11] & A[11];
  assign Y[12] = B[12] & A[12];
  assign Y[13] = B[13] & A[13];
  assign Y[14] = B[14] & A[14];
  assign Y[15] = B[15] & A[15];
endmodule

(* top =  1  *)
(* src = "csa.v:22.1-34.10" *)
module csa(A, B, C, Sum, Carry);
  (* src = "csa.v:23.19-23.20" *)
  input [15:0] A;
  wire [15:0] A;
  (* src = "csa.v:26.17-26.19" *)
  wire [15:0] AB;
  (* src = "csa.v:23.22-23.23" *)
  input [15:0] B;
  wire [15:0] B;
  (* src = "csa.v:26.21-26.23" *)
  wire [15:0] BC;
  (* src = "csa.v:23.25-23.26" *)
  input [15:0] C;
  wire [15:0] C;
  (* src = "csa.v:26.25-26.27" *)
  wire [15:0] CA;
  (* src = "csa.v:24.24-24.29" *)
  output [15:0] Carry;
  wire [15:0] Carry;
  (* src = "csa.v:24.19-24.22" *)
  output [15:0] Sum;
  wire [15:0] Sum;
  (* module_not_derived = 32'd1 *)
  (* src = "csa.v:28.10-28.35" *)
  and2 u1 (
    .A(A),
    .B(B),
    .Y(AB)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa.v:29.10-29.35" *)
  and2 u2 (
    .A(B),
    .B(C),
    .Y(BC)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa.v:30.10-30.35" *)
  and2 u3 (
    .A(C),
    .B(A),
    .Y(CA)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa.v:32.10-32.43" *)
  xor3 u4 (
    .A(A),
    .B(B),
    .C(C),
    .Y(Sum)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa.v:33.10-33.48" *)
  or3 u5 (
    .A(AB),
    .B(BC),
    .C(CA),
    .Y(Carry)
  );
endmodule

(* dynports =  1  *)
(* src = "csa.v:15.1-20.10" *)
module or3(A, B, C, Y);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  (* src = "csa.v:16.24-16.25" *)
  input [15:0] A;
  wire [15:0] A;
  (* src = "csa.v:16.27-16.28" *)
  input [15:0] B;
  wire [15:0] B;
  (* src = "csa.v:16.30-16.31" *)
  input [15:0] C;
  wire [15:0] C;
  (* src = "csa.v:17.24-17.25" *)
  output [15:0] Y;
  wire [15:0] Y;
  assign _00_ = B[0] | A[0];
  assign Y[0] = _00_ | C[0];
  assign _01_ = B[1] | A[1];
  assign Y[1] = _01_ | C[1];
  assign _02_ = B[2] | A[2];
  assign Y[2] = _02_ | C[2];
  assign _03_ = B[3] | A[3];
  assign Y[3] = _03_ | C[3];
  assign _04_ = B[4] | A[4];
  assign Y[4] = _04_ | C[4];
  assign _05_ = B[5] | A[5];
  assign Y[5] = _05_ | C[5];
  assign _06_ = B[6] | A[6];
  assign Y[6] = _06_ | C[6];
  assign _07_ = B[7] | A[7];
  assign Y[7] = _07_ | C[7];
  assign _08_ = B[8] | A[8];
  assign Y[8] = _08_ | C[8];
  assign _09_ = B[9] | A[9];
  assign Y[9] = _09_ | C[9];
  assign _10_ = B[10] | A[10];
  assign Y[10] = _10_ | C[10];
  assign _11_ = B[11] | A[11];
  assign Y[11] = _11_ | C[11];
  assign _12_ = B[12] | A[12];
  assign Y[12] = _12_ | C[12];
  assign _13_ = B[13] | A[13];
  assign Y[13] = _13_ | C[13];
  assign _14_ = B[14] | A[14];
  assign Y[14] = _14_ | C[14];
  assign _15_ = B[15] | A[15];
  assign Y[15] = _15_ | C[15];
endmodule

(* dynports =  1  *)
(* src = "csa.v:1.1-6.10" *)
module xor3(A, B, C, Y);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  (* src = "csa.v:2.24-2.25" *)
  input [15:0] A;
  wire [15:0] A;
  (* src = "csa.v:2.27-2.28" *)
  input [15:0] B;
  wire [15:0] B;
  (* src = "csa.v:2.30-2.31" *)
  input [15:0] C;
  wire [15:0] C;
  (* src = "csa.v:3.24-3.25" *)
  output [15:0] Y;
  wire [15:0] Y;
  assign _00_ = B[1] ^ A[1];
  assign Y[1] = _00_ ^ C[1];
  assign _01_ = B[2] ^ A[2];
  assign Y[2] = _01_ ^ C[2];
  assign _02_ = B[3] ^ A[3];
  assign Y[3] = _02_ ^ C[3];
  assign _03_ = B[4] ^ A[4];
  assign Y[4] = _03_ ^ C[4];
  assign _04_ = B[5] ^ A[5];
  assign Y[5] = _04_ ^ C[5];
  assign _05_ = B[6] ^ A[6];
  assign Y[6] = _05_ ^ C[6];
  assign _06_ = B[7] ^ A[7];
  assign Y[7] = _06_ ^ C[7];
  assign _07_ = B[8] ^ A[8];
  assign Y[8] = _07_ ^ C[8];
  assign _08_ = B[9] ^ A[9];
  assign Y[9] = _08_ ^ C[9];
  assign _09_ = B[10] ^ A[10];
  assign Y[10] = _09_ ^ C[10];
  assign _10_ = B[11] ^ A[11];
  assign Y[11] = _10_ ^ C[11];
  assign _11_ = B[12] ^ A[12];
  assign Y[12] = _11_ ^ C[12];
  assign _12_ = B[13] ^ A[13];
  assign Y[13] = _12_ ^ C[13];
  assign _13_ = B[14] ^ A[14];
  assign Y[14] = _13_ ^ C[14];
  assign _14_ = B[15] ^ A[15];
  assign Y[15] = _14_ ^ C[15];
  assign _15_ = B[0] ^ A[0];
  assign Y[0] = _15_ ^ C[0];
endmodule
