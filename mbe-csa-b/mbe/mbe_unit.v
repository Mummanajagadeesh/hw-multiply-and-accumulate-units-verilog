/* Generated by Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os) */

(* src = "mbe.v:2.1-17.10" *)
module booth_encoder(multiplicand, booth_code, shift, partial_product);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  wire _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  wire _211_;
  (* src = "mbe.v:4.17-4.27" *)
  input [2:0] booth_code;
  wire [2:0] booth_code;
  (* src = "mbe.v:3.25-3.37" *)
  input [15:0] multiplicand;
  wire [15:0] multiplicand;
  (* src = "mbe.v:6.30-6.45" *)
  output [15:0] partial_product;
  wire [15:0] partial_product;
  (* src = "mbe.v:5.17-5.22" *)
  input [3:0] shift;
  wire [3:0] shift;
  assign _170_ = _158_ ? shift[3] : _169_;
  assign _171_ = ~(_170_ | _167_);
  assign _172_ = ~(shift[3] & shift[2]);
  assign _173_ = _172_ | _164_;
  assign _174_ = ~(_173_ | _158_);
  assign _175_ = _174_ | ~(_171_);
  assign _176_ = _157_ | _155_;
  assign _177_ = booth_code[1] | ~(booth_code[0]);
  assign _178_ = booth_code[2] & ~(_177_);
  assign _179_ = _176_ & ~(_178_);
  assign _180_ = booth_code[0] | ~(booth_code[1]);
  assign _181_ = booth_code[2] & ~(_180_);
  assign _182_ = _179_ & ~(_181_);
  assign _183_ = ~(_182_ | _175_);
  assign _184_ = booth_code[2] | ~(booth_code[0]);
  assign _185_ = _155_ & ~(_180_);
  assign _186_ = _184_ & ~(_185_);
  assign _187_ = ~_186_;
  assign _188_ = _187_ & ~(_175_);
  assign _189_ = _188_ | _183_;
  assign _190_ = _187_ | ~(_182_);
  assign partial_product[0] = _190_ & _189_;
  assign _191_ = ~multiplicand[1];
  assign _192_ = _159_ ? _154_ : _191_;
  assign _193_ = _192_ | _162_;
  assign _194_ = _193_ | _166_;
  assign _195_ = _194_ | _170_;
  assign _196_ = ~(_195_ | _174_);
  assign _197_ = _196_ ^ _175_;
  assign _198_ = _197_ | _182_;
  assign _199_ = _196_ & _187_;
  assign _200_ = _198_ & ~(_199_);
  assign partial_product[1] = _190_ & ~(_200_);
  assign _201_ = ~multiplicand[2];
  assign _202_ = _159_ ? _191_ : _201_;
  assign _203_ = _162_ ? _160_ : _202_;
  assign _204_ = _203_ | _166_;
  assign _205_ = _204_ | _170_;
  assign _206_ = ~(_205_ | _174_);
  assign _207_ = _175_ & ~(_196_);
  assign _208_ = _207_ ^ _206_;
  assign _209_ = _208_ | _182_;
  assign _210_ = _206_ & ~(_186_);
  assign _211_ = _209_ & ~(_210_);
  assign partial_product[2] = _190_ & ~(_211_);
  assign _000_ = ~multiplicand[3];
  assign _001_ = _159_ ? _201_ : _000_;
  assign _002_ = _162_ ? _192_ : _001_;
  assign _003_ = _002_ | _166_;
  assign _004_ = _003_ | _170_;
  assign _005_ = ~(_004_ | _174_);
  assign _006_ = _207_ & ~(_206_);
  assign _007_ = _006_ ^ _005_;
  assign _008_ = _007_ | _182_;
  assign _009_ = _005_ & _187_;
  assign _010_ = _008_ & ~(_009_);
  assign partial_product[3] = _190_ & ~(_010_);
  assign _011_ = ~multiplicand[4];
  assign _012_ = _159_ ? _000_ : _011_;
  assign _013_ = _162_ ? _202_ : _012_;
  assign _014_ = _166_ ? _163_ : _013_;
  assign _015_ = _014_ | _170_;
  assign _016_ = ~(_015_ | _174_);
  assign _017_ = _005_ | _206_;
  assign _018_ = _017_ | ~(_207_);
  assign _019_ = ~(_018_ ^ _016_);
  assign _020_ = _019_ | _182_;
  assign _021_ = _016_ & ~(_186_);
  assign _022_ = _020_ & ~(_021_);
  assign partial_product[4] = _190_ & ~(_022_);
  assign _023_ = ~multiplicand[5];
  assign _024_ = _159_ ? _011_ : _023_;
  assign _025_ = _162_ ? _001_ : _024_;
  assign _026_ = _166_ ? _193_ : _025_;
  assign _027_ = _026_ | _170_;
  assign _028_ = ~(_027_ | _174_);
  assign _029_ = ~(_018_ | _016_);
  assign _030_ = _029_ ^ _028_;
  assign _031_ = _030_ | _182_;
  assign _032_ = _028_ & _187_;
  assign _033_ = _031_ & ~(_032_);
  assign partial_product[5] = _190_ & ~(_033_);
  assign _034_ = ~multiplicand[6];
  assign _035_ = _159_ ? _023_ : _034_;
  assign _036_ = _162_ ? _012_ : _035_;
  assign _037_ = _166_ ? _203_ : _036_;
  assign _038_ = _037_ | _170_;
  assign _039_ = ~(_038_ | _174_);
  assign _040_ = ~_039_;
  assign _041_ = _028_ | _016_;
  assign _042_ = _041_ | _018_;
  assign _043_ = _042_ ^ _040_;
  assign _044_ = _043_ | _182_;
  assign _045_ = _039_ & ~(_186_);
  assign _046_ = _044_ & ~(_045_);
  assign partial_product[6] = _190_ & ~(_046_);
  assign _047_ = ~multiplicand[7];
  assign _048_ = _159_ ? _034_ : _047_;
  assign _049_ = _162_ ? _024_ : _048_;
  assign _050_ = _166_ ? _002_ : _049_;
  assign _051_ = _050_ | _170_;
  assign _052_ = ~(_051_ | _174_);
  assign _053_ = _040_ & ~(_042_);
  assign _054_ = _053_ ^ _052_;
  assign _055_ = _054_ | _182_;
  assign _056_ = _052_ & _187_;
  assign _057_ = _055_ & ~(_056_);
  assign partial_product[7] = _190_ & ~(_057_);
  assign _058_ = ~multiplicand[8];
  assign _059_ = _159_ ? _047_ : _058_;
  assign _060_ = _162_ ? _035_ : _059_;
  assign _061_ = _166_ ? _013_ : _060_;
  assign _062_ = _170_ ? _167_ : _061_;
  assign _063_ = ~(_062_ | _174_);
  assign _064_ = _052_ | _039_;
  assign _065_ = _064_ | _041_;
  assign _066_ = _065_ | _018_;
  assign _067_ = ~(_066_ ^ _063_);
  assign _068_ = _067_ | _182_;
  assign _069_ = _063_ & ~(_186_);
  assign _070_ = _068_ & ~(_069_);
  assign partial_product[8] = _190_ & ~(_070_);
  assign _071_ = ~multiplicand[9];
  assign _072_ = _159_ ? _058_ : _071_;
  assign _073_ = _162_ ? _048_ : _072_;
  assign _074_ = _166_ ? _025_ : _073_;
  assign _075_ = _170_ ? _194_ : _074_;
  assign _076_ = ~(_075_ | _174_);
  assign _077_ = ~(_066_ | _063_);
  assign _078_ = _077_ ^ _076_;
  assign _079_ = _078_ | _182_;
  assign _080_ = _076_ & _187_;
  assign _081_ = _079_ & ~(_080_);
  assign partial_product[9] = _190_ & ~(_081_);
  assign _082_ = ~multiplicand[10];
  assign _083_ = _159_ ? _071_ : _082_;
  assign _084_ = _162_ ? _059_ : _083_;
  assign _085_ = _166_ ? _036_ : _084_;
  assign _086_ = _170_ ? _204_ : _085_;
  assign _087_ = ~(_086_ | _174_);
  assign _088_ = ~_087_;
  assign _089_ = _076_ | _063_;
  assign _090_ = _089_ | _066_;
  assign _091_ = _090_ ^ _088_;
  assign _092_ = _091_ | _182_;
  assign _093_ = _087_ & ~(_186_);
  assign _094_ = _092_ & ~(_093_);
  assign partial_product[10] = _190_ & ~(_094_);
  assign _095_ = ~multiplicand[11];
  assign _096_ = _159_ ? _082_ : _095_;
  assign _097_ = _162_ ? _072_ : _096_;
  assign _098_ = _166_ ? _049_ : _097_;
  assign _099_ = _170_ ? _003_ : _098_;
  assign _100_ = ~(_099_ | _174_);
  assign _101_ = _088_ & ~(_090_);
  assign _102_ = _101_ ^ _100_;
  assign _103_ = _102_ | _182_;
  assign _104_ = _100_ & _187_;
  assign _105_ = _103_ & ~(_104_);
  assign partial_product[11] = _190_ & ~(_105_);
  assign _106_ = ~multiplicand[12];
  assign _107_ = _159_ ? _095_ : _106_;
  assign _108_ = _162_ ? _083_ : _107_;
  assign _109_ = _166_ ? _060_ : _108_;
  assign _110_ = _170_ ? _014_ : _109_;
  assign _111_ = ~(_110_ | _174_);
  assign _112_ = ~_111_;
  assign _113_ = _100_ | _087_;
  assign _114_ = _113_ | _089_;
  assign _115_ = _114_ | _066_;
  assign _116_ = _115_ ^ _112_;
  assign _117_ = _116_ | _182_;
  assign _118_ = _111_ & ~(_186_);
  assign _119_ = _117_ & ~(_118_);
  assign partial_product[12] = _190_ & ~(_119_);
  assign _120_ = ~multiplicand[13];
  assign _121_ = _159_ ? _106_ : _120_;
  assign _122_ = _162_ ? _096_ : _121_;
  assign _123_ = _166_ ? _073_ : _122_;
  assign _124_ = _170_ ? _026_ : _123_;
  assign _125_ = ~(_124_ | _174_);
  assign _126_ = _112_ & ~(_115_);
  assign _127_ = _126_ ^ _125_;
  assign _128_ = _127_ | _182_;
  assign _129_ = _125_ & _187_;
  assign _130_ = _128_ & ~(_129_);
  assign partial_product[13] = _190_ & ~(_130_);
  assign _131_ = ~multiplicand[14];
  assign _132_ = _159_ ? _120_ : _131_;
  assign _133_ = _162_ ? _107_ : _132_;
  assign _134_ = _166_ ? _084_ : _133_;
  assign _135_ = _170_ ? _037_ : _134_;
  assign _136_ = _135_ | _174_;
  assign _137_ = _125_ | _111_;
  assign _138_ = _137_ | _115_;
  assign _139_ = _138_ ^ _136_;
  assign _140_ = _139_ | _182_;
  assign _141_ = _187_ & ~(_136_);
  assign _142_ = _140_ & ~(_141_);
  assign partial_product[14] = _190_ & ~(_142_);
  assign _143_ = ~multiplicand[15];
  assign _144_ = _159_ ? _131_ : _143_;
  assign _145_ = _162_ ? _121_ : _144_;
  assign _146_ = _166_ ? _097_ : _145_;
  assign _147_ = _170_ ? _050_ : _146_;
  assign _148_ = ~(_147_ | _174_);
  assign _149_ = _136_ & ~(_138_);
  assign _150_ = _149_ ^ _148_;
  assign _151_ = _150_ | _182_;
  assign _152_ = _148_ & ~(_186_);
  assign _153_ = _151_ & ~(_152_);
  assign partial_product[15] = _190_ & ~(_153_);
  assign _154_ = ~multiplicand[0];
  assign _155_ = ~booth_code[2];
  assign _156_ = ~(booth_code[1] & booth_code[0]);
  assign _157_ = booth_code[1] | booth_code[0];
  assign _158_ = booth_code[2] ? _157_ : _156_;
  assign _159_ = ~(_158_ ^ shift[0]);
  assign _160_ = _159_ | _154_;
  assign _161_ = shift[1] ^ shift[0];
  assign _162_ = _158_ ? shift[1] : _161_;
  assign _163_ = _162_ | _160_;
  assign _164_ = ~(shift[1] & shift[0]);
  assign _165_ = ~(_164_ ^ shift[2]);
  assign _166_ = _158_ ? shift[2] : _165_;
  assign _167_ = _166_ | _163_;
  assign _168_ = shift[2] & ~(_164_);
  assign _169_ = _168_ ^ shift[3];
endmodule

(* top =  1  *)
(* src = "mbe.v:29.1-58.10" *)
module mbe(A, B, P);
  (* src = "mbe.v:30.25-30.26" *)
  input [7:0] A;
  wire [7:0] A;
  (* src = "mbe.v:31.25-31.26" *)
  input [7:0] B;
  wire [7:0] B;
  (* src = "mbe.v:32.26-32.27" *)
  output [15:0] P;
  wire [15:0] P;
  (* src = "mbe.v:40.16-40.22" *)
  wire [2:0] booth0;
  (* src = "mbe.v:40.24-40.30" *)
  wire [2:0] booth1;
  (* src = "mbe.v:40.32-40.38" *)
  wire [2:0] booth2;
  (* src = "mbe.v:40.40-40.46" *)
  wire [2:0] booth3;
  (* src = "mbe.v:34.24-34.40" *)
  wire [15:0] multiplicand_ext;
  (* src = "mbe.v:37.24-37.27" *)
  wire [15:0] pp0;
  (* src = "mbe.v:37.29-37.32" *)
  wire [15:0] pp1;
  (* src = "mbe.v:37.34-37.37" *)
  wire [15:0] pp2;
  (* src = "mbe.v:37.39-37.42" *)
  wire [15:0] pp3;
  (* src = "mbe.v:38.24-38.28" *)
  wire [15:0] sum0;
  (* src = "mbe.v:38.30-38.34" *)
  wire [15:0] sum1;
  (* src = "mbe.v:38.36-38.40" *)
  wire [15:0] sum2;
  (* module_not_derived = 32'd1 *)
  (* src = "mbe.v:53.20-53.67" *)
  pp_accumulator a0 (
    .pp_in(pp0),
    .sum_in(16'h0000),
    .sum_out(sum0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "mbe.v:54.20-54.66" *)
  pp_accumulator a1 (
    .pp_in(pp1),
    .sum_in(sum0),
    .sum_out(sum1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "mbe.v:55.20-55.66" *)
  pp_accumulator a2 (
    .pp_in(pp2),
    .sum_in(sum1),
    .sum_out(sum2)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "mbe.v:56.20-56.63" *)
  pp_accumulator a3 (
    .pp_in(pp3),
    .sum_in(sum2),
    .sum_out(P)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "mbe.v:47.19-47.109" *)
  booth_encoder u0 (
    .booth_code({ B[1:0], 1'h0 }),
    .multiplicand({ A[7], A[7], A[7], A[7], A[7], A[7], A[7], A[7], A }),
    .partial_product(pp0),
    .shift(4'h0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "mbe.v:48.19-48.109" *)
  booth_encoder u1 (
    .booth_code(B[3:1]),
    .multiplicand({ A[7], A[7], A[7], A[7], A[7], A[7], A[7], A[7], A }),
    .partial_product(pp1),
    .shift(4'h2)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "mbe.v:49.19-49.109" *)
  booth_encoder u2 (
    .booth_code(B[5:3]),
    .multiplicand({ A[7], A[7], A[7], A[7], A[7], A[7], A[7], A[7], A }),
    .partial_product(pp2),
    .shift(4'h4)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "mbe.v:50.19-50.109" *)
  booth_encoder u3 (
    .booth_code(B[7:5]),
    .multiplicand({ A[7], A[7], A[7], A[7], A[7], A[7], A[7], A[7], A }),
    .partial_product(pp3),
    .shift(4'h6)
  );
  assign booth0 = { B[1:0], 1'h0 };
  assign booth1 = B[3:1];
  assign booth2 = B[5:3];
  assign booth3 = B[7:5];
  assign multiplicand_ext = { A[7], A[7], A[7], A[7], A[7], A[7], A[7], A[7], A };
endmodule

(* src = "mbe.v:20.1-26.10" *)
module pp_accumulator(pp_in, sum_in, sum_out);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  (* src = "mbe.v:21.25-21.30" *)
  input [15:0] pp_in;
  wire [15:0] pp_in;
  (* src = "mbe.v:22.25-22.31" *)
  input [15:0] sum_in;
  wire [15:0] sum_in;
  (* src = "mbe.v:23.26-23.33" *)
  output [15:0] sum_out;
  wire [15:0] sum_out;
  assign _039_ = pp_in[1] ^ sum_in[1];
  assign _040_ = ~(pp_in[0] & sum_in[0]);
  assign sum_out[1] = ~(_040_ ^ _039_);
  assign _041_ = ~(pp_in[2] ^ sum_in[2]);
  assign _042_ = pp_in[1] & sum_in[1];
  assign _043_ = _039_ & ~(_040_);
  assign _044_ = _043_ | _042_;
  assign sum_out[2] = ~(_044_ ^ _041_);
  assign _045_ = ~(pp_in[3] ^ sum_in[3]);
  assign _046_ = ~(pp_in[2] & sum_in[2]);
  assign _047_ = _044_ & ~(_041_);
  assign _048_ = _046_ & ~(_047_);
  assign sum_out[3] = _048_ ^ _045_;
  assign _049_ = ~(pp_in[4] ^ sum_in[4]);
  assign _050_ = pp_in[3] & sum_in[3];
  assign _051_ = ~(_046_ | _045_);
  assign _052_ = _051_ | _050_;
  assign _053_ = _045_ | _041_;
  assign _054_ = _044_ & ~(_053_);
  assign _055_ = _054_ | _052_;
  assign sum_out[4] = ~(_055_ ^ _049_);
  assign _056_ = ~(pp_in[5] ^ sum_in[5]);
  assign _057_ = ~(pp_in[4] & sum_in[4]);
  assign _058_ = _055_ & ~(_049_);
  assign _059_ = _057_ & ~(_058_);
  assign sum_out[5] = _059_ ^ _056_;
  assign _060_ = ~(pp_in[6] ^ sum_in[6]);
  assign _061_ = pp_in[5] & sum_in[5];
  assign _062_ = ~(_057_ | _056_);
  assign _063_ = _062_ | _061_;
  assign _064_ = _056_ | _049_;
  assign _065_ = _064_ | ~(_055_);
  assign _066_ = _065_ & ~(_063_);
  assign sum_out[6] = _066_ ^ _060_;
  assign _067_ = ~(pp_in[7] ^ sum_in[7]);
  assign _068_ = ~(pp_in[6] & sum_in[6]);
  assign _069_ = ~(_066_ | _060_);
  assign _070_ = _068_ & ~(_069_);
  assign sum_out[7] = _070_ ^ _067_;
  assign _071_ = ~(pp_in[8] ^ sum_in[8]);
  assign _072_ = pp_in[7] & sum_in[7];
  assign _073_ = ~(_068_ | _067_);
  assign _074_ = _073_ | _072_;
  assign _075_ = _067_ | _060_;
  assign _076_ = _063_ & ~(_075_);
  assign _077_ = _076_ | _074_;
  assign _078_ = _075_ | _064_;
  assign _079_ = _055_ & ~(_078_);
  assign _080_ = _079_ | _077_;
  assign sum_out[8] = ~(_080_ ^ _071_);
  assign _081_ = ~(pp_in[9] ^ sum_in[9]);
  assign _000_ = ~(pp_in[8] & sum_in[8]);
  assign _001_ = _080_ & ~(_071_);
  assign _002_ = _000_ & ~(_001_);
  assign sum_out[9] = _002_ ^ _081_;
  assign _003_ = ~(pp_in[10] ^ sum_in[10]);
  assign _004_ = pp_in[9] & sum_in[9];
  assign _005_ = ~(_000_ | _081_);
  assign _006_ = _005_ | _004_;
  assign _007_ = _081_ | _071_;
  assign _008_ = _007_ | ~(_080_);
  assign _009_ = _008_ & ~(_006_);
  assign sum_out[10] = _009_ ^ _003_;
  assign _010_ = ~(pp_in[11] ^ sum_in[11]);
  assign _011_ = ~(pp_in[10] & sum_in[10]);
  assign _012_ = ~(_009_ | _003_);
  assign _013_ = _011_ & ~(_012_);
  assign sum_out[11] = _013_ ^ _010_;
  assign _014_ = ~(pp_in[12] ^ sum_in[12]);
  assign _015_ = ~(pp_in[11] & sum_in[11]);
  assign _016_ = ~(_011_ | _010_);
  assign _017_ = _015_ & ~(_016_);
  assign _018_ = _010_ | _003_;
  assign _019_ = _006_ & ~(_018_);
  assign _020_ = _017_ & ~(_019_);
  assign _021_ = _018_ | _007_;
  assign _022_ = _080_ & ~(_021_);
  assign _023_ = _020_ & ~(_022_);
  assign sum_out[12] = _023_ ^ _014_;
  assign _024_ = ~(pp_in[13] ^ sum_in[13]);
  assign _025_ = ~(pp_in[12] & sum_in[12]);
  assign _026_ = ~(_023_ | _014_);
  assign _027_ = _025_ & ~(_026_);
  assign sum_out[13] = _027_ ^ _024_;
  assign _028_ = ~(pp_in[14] ^ sum_in[14]);
  assign _029_ = ~(pp_in[13] & sum_in[13]);
  assign _030_ = ~(_025_ | _024_);
  assign _031_ = _029_ & ~(_030_);
  assign _032_ = _024_ | _014_;
  assign _033_ = ~(_032_ | _023_);
  assign _034_ = _031_ & ~(_033_);
  assign sum_out[14] = _034_ ^ _028_;
  assign _035_ = ~(pp_in[15] ^ sum_in[15]);
  assign _036_ = ~(pp_in[14] & sum_in[14]);
  assign _037_ = ~(_034_ | _028_);
  assign _038_ = _036_ & ~(_037_);
  assign sum_out[15] = _038_ ^ _035_;
  assign sum_out[0] = pp_in[0] ^ sum_in[0];
endmodule
