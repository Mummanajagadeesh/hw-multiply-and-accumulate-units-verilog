
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/baugh/src/baugh.v
Parsing SystemVerilog input from `/openlane/designs/baugh/src/baugh.v' to AST representation.
Generating RTLIL representation for module `\baugh'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/baugh/runs/myrun/tmp/synthesis/hierarchy.dot'.
Dumping module baugh to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \baugh

3.2. Analyzing design hierarchy..
Top module:  \baugh
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \baugh

5.2. Analyzing design hierarchy..
Top module:  \baugh
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 130 assignments to connections.

9. Executing PROC_INIT pass (extract init attributes).

10. Executing PROC_ARST pass (detect async resets in processes).

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\baugh.$proc$/openlane/designs/baugh/src/baugh.v:0$12'.
Creating decoders for process `\baugh.$proc$/openlane/designs/baugh/src/baugh.v:28$2'.

13. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\baugh.\pp[0]' from process `\baugh.$proc$/openlane/designs/baugh/src/baugh.v:0$12'.
No latch inferred for signal `\baugh.\pp[1]' from process `\baugh.$proc$/openlane/designs/baugh/src/baugh.v:0$12'.
No latch inferred for signal `\baugh.\pp[2]' from process `\baugh.$proc$/openlane/designs/baugh/src/baugh.v:0$12'.
No latch inferred for signal `\baugh.\pp[3]' from process `\baugh.$proc$/openlane/designs/baugh/src/baugh.v:0$12'.
No latch inferred for signal `\baugh.\pp[4]' from process `\baugh.$proc$/openlane/designs/baugh/src/baugh.v:0$12'.
No latch inferred for signal `\baugh.\pp[5]' from process `\baugh.$proc$/openlane/designs/baugh/src/baugh.v:0$12'.
No latch inferred for signal `\baugh.\pp[6]' from process `\baugh.$proc$/openlane/designs/baugh/src/baugh.v:0$12'.
No latch inferred for signal `\baugh.\pp[7]' from process `\baugh.$proc$/openlane/designs/baugh/src/baugh.v:0$12'.
No latch inferred for signal `\baugh.\k' from process `\baugh.$proc$/openlane/designs/baugh/src/baugh.v:28$2'.
No latch inferred for signal `\baugh.\unsigned_sum' from process `\baugh.$proc$/openlane/designs/baugh/src/baugh.v:28$2'.

14. Executing PROC_DFF pass (convert process syncs to FFs).

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `baugh.$proc$/openlane/designs/baugh/src/baugh.v:0$12'.
Removing empty process `baugh.$proc$/openlane/designs/baugh/src/baugh.v:28$2'.
Cleaned up 0 empty switches.

17. Executing CHECK pass (checking for obvious problems).
Checking module baugh...
Found and reported 0 problems.

18. Executing OPT_EXPR pass (perform const folding).
Optimizing module baugh.
<suppressed ~1 debug messages>

19. Executing FLATTEN pass (flatten design).

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module baugh.

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \baugh..
Removed 71 unused cells and 84 unused wires.
<suppressed ~74 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module baugh.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\baugh'.
Removed a total of 0 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \baugh..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \baugh.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\baugh'.
Removed a total of 0 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \baugh..

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module baugh.

22.9. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \baugh..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module baugh.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\baugh'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \baugh..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \baugh.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\baugh'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \baugh..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module baugh.

24.9. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).
Removed top 8 bits (of 16) from port A of cell baugh.$mul$/openlane/designs/baugh/src/baugh.v:38$11 ($mul).
Removed top 8 bits (of 16) from port B of cell baugh.$mul$/openlane/designs/baugh/src/baugh.v:38$11 ($mul).

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \baugh..

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module baugh:
  creating $macc model for $mul$/openlane/designs/baugh/src/baugh.v:38$11 ($mul).
  creating $macc cell for $mul$/openlane/designs/baugh/src/baugh.v:38$11: $auto$alumacc.cc:365:replace_macc$77
  created 0 $alu and 1 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module baugh.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\baugh'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \baugh..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \baugh.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\baugh'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \baugh..

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module baugh.

30.9. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \baugh..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \baugh..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \baugh..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module baugh.
<suppressed ~8 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\baugh'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \baugh..

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module baugh.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\baugh'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \baugh..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \baugh.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\baugh'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \baugh..

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module baugh.

35.10. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using extmapper maccmap for cells of type $macc.
  add \A * \B (8x8 bits, signed)
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000010000 for cells of type $fa.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~350 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module baugh.
<suppressed ~273 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\baugh'.
<suppressed ~339 debug messages>
Removed a total of 113 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \baugh..
Removed 33 unused cells and 119 unused wires.
<suppressed ~34 debug messages>

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\baugh' to `<abc-temp-dir>/input.blif'..
Extracted 424 gates and 440 wires to a netlist network with 16 inputs and 16 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        7
ABC RESULTS:              NAND cells:       26
ABC RESULTS:             ORNOT cells:        7
ABC RESULTS:               AND cells:       47
ABC RESULTS:              XNOR cells:       42
ABC RESULTS:                OR cells:       53
ABC RESULTS:               NOR cells:       13
ABC RESULTS:            ANDNOT cells:      129
ABC RESULTS:               XOR cells:       99
ABC RESULTS:        internal signals:      408
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       16
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module baugh.

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\baugh'.
Removed a total of 0 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \baugh..
Removed 0 unused cells and 104 unused wires.
<suppressed ~1 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \baugh

40.2. Analyzing design hierarchy..
Top module:  \baugh
Removed 0 unused modules.

41. Printing statistics.

=== baugh ===

   Number of wires:                423
   Number of wire bits:            647
   Number of public wires:          16
   Number of public wire bits:     240
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                423
     $_ANDNOT_                     129
     $_AND_                         47
     $_NAND_                        26
     $_NOR_                         13
     $_NOT_                          7
     $_ORNOT_                        7
     $_OR_                          53
     $_XNOR_                        42
     $_XOR_                         99

42. Executing CHECK pass (checking for obvious problems).
Checking module baugh...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/baugh/runs/myrun/tmp/synthesis/post_techmap.dot'.
Dumping module baugh to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module baugh.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\baugh'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \baugh..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \baugh.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\baugh'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \baugh..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module baugh.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \baugh..
Removed 0 unused cells and 13 unused wires.
<suppressed ~13 debug messages>

47. Printing statistics.

=== baugh ===

   Number of wires:                410
   Number of wire bits:            439
   Number of public wires:           3
   Number of public wire bits:      32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                423
     $_ANDNOT_                     129
     $_AND_                         47
     $_NAND_                        26
     $_NOR_                         13
     $_NOT_                          7
     $_ORNOT_                        7
     $_OR_                          53
     $_XNOR_                        42
     $_XOR_                         99

mapping tbuf

48. Executing TECHMAP pass (map to technology primitives).

48.1. Executing Verilog-2005 frontend: /home/jagadeesh97/.ciel/ciel/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/jagadeesh97/.ciel/ciel/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/jagadeesh97/.ciel/ciel/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/jagadeesh97/.ciel/ciel/sky130/versions/0fe599b2afb6708d281543108caf8310912f54af/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

52.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\baugh':

53. Printing statistics.

=== baugh ===

   Number of wires:                410
   Number of wire bits:            439
   Number of public wires:           3
   Number of public wire bits:      32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                423
     $_ANDNOT_                     129
     $_AND_                         47
     $_NAND_                        26
     $_NOR_                         13
     $_NOT_                          7
     $_ORNOT_                        7
     $_OR_                          53
     $_XNOR_                        42
     $_XOR_                         99

[INFO]: USING STRATEGY AREA 0

54. Executing ABC pass (technology mapping using ABC).

54.1. Extracting gate netlist of module `\baugh' to `/tmp/yosys-abc-2iM3tB/input.blif'..
Extracted 423 gates and 439 wires to a netlist network with 16 inputs and 16 outputs.

54.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-2iM3tB/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-2iM3tB/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-2iM3tB/input.blif 
ABC: + read_lib -w /openlane/designs/baugh/runs/myrun/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/baugh/runs/myrun/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.06 sec
ABC: Memory =    9.54 MB. Time =     0.06 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/baugh/runs/myrun/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/baugh/runs/myrun/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000.0 
ABC: Current delay (4423.11 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    374 (  7.0 %)   Cap = 10.3 ff (  1.5 %)   Area =     3598.45 ( 93.0 %)   Delay =  4472.84 ps  (  9.9 %)               
ABC: Path  0 --       4 : 0    8 pi                       A =   0.00  Df =  80.7  -43.7 ps  S = 119.3 ps  Cin =  0.0 ff  Cout =  24.9 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      38 : 1   10 sky130_fd_sc_hd__buf_1   A =   3.75  Df = 414.1 -170.7 ps  S = 381.5 ps  Cin =  2.1 ff  Cout =  32.0 ff  Cmax = 130.0 ff  G = 1467  
ABC: Path  2 --     238 : 3    2 sky130_fd_sc_hd__and3_2  A =   7.51  Df = 676.8 -169.2 ps  S =  62.9 ps  Cin =  1.5 ff  Cout =   6.2 ff  Cmax = 309.5 ff  G =  396  
ABC: Path  3 --     239 : 2    5 sky130_fd_sc_hd__nand2_2 A =   6.26  Df = 762.5 -147.9 ps  S = 116.5 ps  Cin =  4.4 ff  Cout =  17.0 ff  Cmax = 295.7 ff  G =  372  
ABC: Path  4 --     243 : 3    2 sky130_fd_sc_hd__and3_2  A =   7.51  Df = 993.0   -2.3 ps  S =  59.8 ps  Cin =  1.5 ff  Cout =   6.1 ff  Cmax = 309.5 ff  G =  393  
ABC: Path  5 --     246 : 3    3 sky130_fd_sc_hd__or3b_2  A =   8.76  Df =1477.0 -274.0 ps  S =  94.3 ps  Cin =  1.5 ff  Cout =   7.8 ff  Cmax = 269.2 ff  G =  497  
ABC: Path  6 --     248 : 3    2 sky130_fd_sc_hd__and3_2  A =   7.51  Df =1700.2 -206.3 ps  S =  64.5 ps  Cin =  1.5 ff  Cout =   7.2 ff  Cmax = 309.5 ff  G =  454  
ABC: Path  7 --     251 : 4    3 sky130_fd_sc_hd__o211a_2 A =  10.01  Df =1971.6 -128.1 ps  S =  73.8 ps  Cin =  2.4 ff  Cout =   8.7 ff  Cmax = 268.3 ff  G =  346  
ABC: Path  8 --     252 : 3    2 sky130_fd_sc_hd__or3_2   A =   7.51  Df =2399.5 -280.2 ps  S =  91.2 ps  Cin =  1.5 ff  Cout =   6.9 ff  Cmax = 310.4 ff  G =  442  
ABC: Path  9 --     254 : 4    3 sky130_fd_sc_hd__o211a_2 A =  10.01  Df =2561.4 -250.5 ps  S =  71.9 ps  Cin =  2.4 ff  Cout =   7.9 ff  Cmax = 268.3 ff  G =  313  
ABC: Path 10 --     286 : 4    2 sky130_fd_sc_hd__or4_2   A =   8.76  Df =3184.3 -430.1 ps  S = 113.0 ps  Cin =  1.5 ff  Cout =   6.3 ff  Cmax = 310.4 ff  G =  395  
ABC: Path 11 --     321 : 4    2 sky130_fd_sc_hd__or4_2   A =   8.76  Df =3828.4 -900.3 ps  S = 115.2 ps  Cin =  1.5 ff  Cout =   6.6 ff  Cmax = 310.4 ff  G =  423  
ABC: Path 12 --     348 : 3    4 sky130_fd_sc_hd__a21oi_2 A =   8.76  Df =4060.3-1060.1 ps  S = 191.5 ps  Cin =  4.6 ff  Cout =  13.3 ff  Cmax = 128.2 ff  G =  274  
ABC: Path 13 --     395 : 4    1 sky130_fd_sc_hd__o31a_2  A =  10.01  Df =4247.9 -905.3 ps  S =  66.1 ps  Cin =  2.3 ff  Cout =   8.4 ff  Cmax = 285.7 ff  G =  351  
ABC: Path 14 --     396 : 2    1 sky130_fd_sc_hd__xnor2_2 A =  16.27  Df =4472.8 -758.0 ps  S = 453.5 ps  Cin =  8.5 ff  Cout =  33.4 ff  Cmax = 121.8 ff  G =  394  
ABC: Start-point = pi3 (\B [1]).  End-point = po13 (\P [14]).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   16/   16  lat =    0  nd =   374  edge =   1015  area =3599.01  delay =15.00  lev = 15
ABC: + write_blif /tmp/yosys-abc-2iM3tB/output.blif 

54.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:       21
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       18
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__o311ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       29
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       25
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       37
ABC RESULTS:        internal signals:      407
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       16
Removing temp directory.

55. Executing SETUNDEF pass (replace undef values with defined constants).

56. Executing HILOMAP pass (mapping to constant drivers).

57. Executing SPLITNETS pass (splitting up multi-bit signals).

58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \baugh..
Removed 0 unused cells and 439 unused wires.
<suppressed ~1 debug messages>

59. Executing INSBUF pass (insert buffer cells for connected wires).

60. Executing CHECK pass (checking for obvious problems).
Checking module baugh...
Warning: Wire baugh.\P [15] is used but has no driver.
Warning: Wire baugh.\P [14] is used but has no driver.
Warning: Wire baugh.\P [13] is used but has no driver.
Warning: Wire baugh.\P [12] is used but has no driver.
Warning: Wire baugh.\P [11] is used but has no driver.
Warning: Wire baugh.\P [10] is used but has no driver.
Warning: Wire baugh.\P [9] is used but has no driver.
Warning: Wire baugh.\P [8] is used but has no driver.
Warning: Wire baugh.\P [7] is used but has no driver.
Warning: Wire baugh.\P [6] is used but has no driver.
Warning: Wire baugh.\P [5] is used but has no driver.
Warning: Wire baugh.\P [4] is used but has no driver.
Warning: Wire baugh.\P [3] is used but has no driver.
Warning: Wire baugh.\P [2] is used but has no driver.
Warning: Wire baugh.\P [1] is used but has no driver.
Warning: Wire baugh.\P [0] is used but has no driver.
Found and reported 16 problems.

61. Printing statistics.

=== baugh ===

   Number of wires:                361
   Number of wire bits:            390
   Number of public wires:           3
   Number of public wire bits:      32
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                374
     sky130_fd_sc_hd__a211o_2        3
     sky130_fd_sc_hd__a211oi_2       4
     sky130_fd_sc_hd__a21bo_2       15
     sky130_fd_sc_hd__a21boi_2       1
     sky130_fd_sc_hd__a21o_2        29
     sky130_fd_sc_hd__a21oi_2       12
     sky130_fd_sc_hd__a22o_2         8
     sky130_fd_sc_hd__a22oi_2        8
     sky130_fd_sc_hd__a2bb2o_2       1
     sky130_fd_sc_hd__a31o_2         2
     sky130_fd_sc_hd__a32o_2         3
     sky130_fd_sc_hd__a32oi_2        1
     sky130_fd_sc_hd__and2_2        14
     sky130_fd_sc_hd__and2b_2        6
     sky130_fd_sc_hd__and3_2        18
     sky130_fd_sc_hd__and3b_2        2
     sky130_fd_sc_hd__and4_2         8
     sky130_fd_sc_hd__and4b_2        5
     sky130_fd_sc_hd__and4bb_2       3
     sky130_fd_sc_hd__buf_1         19
     sky130_fd_sc_hd__inv_2          7
     sky130_fd_sc_hd__mux2_2         1
     sky130_fd_sc_hd__nand2_2       25
     sky130_fd_sc_hd__nand3_2       21
     sky130_fd_sc_hd__nand3b_2       1
     sky130_fd_sc_hd__nand4_2        4
     sky130_fd_sc_hd__nor2_2        19
     sky130_fd_sc_hd__nor3_2         2
     sky130_fd_sc_hd__nor3b_2        1
     sky130_fd_sc_hd__nor4_2         1
     sky130_fd_sc_hd__o211a_2        6
     sky130_fd_sc_hd__o211ai_2       3
     sky130_fd_sc_hd__o21a_2         5
     sky130_fd_sc_hd__o21ai_2       12
     sky130_fd_sc_hd__o21ba_2        4
     sky130_fd_sc_hd__o21bai_2       4
     sky130_fd_sc_hd__o22a_2         1
     sky130_fd_sc_hd__o2bb2a_2       8
     sky130_fd_sc_hd__o311ai_2       1
     sky130_fd_sc_hd__o31a_2         3
     sky130_fd_sc_hd__or2_2         10
     sky130_fd_sc_hd__or2b_2        10
     sky130_fd_sc_hd__or3_2          9
     sky130_fd_sc_hd__or3b_2         1
     sky130_fd_sc_hd__or4_2          2
     sky130_fd_sc_hd__xnor2_2       37
     sky130_fd_sc_hd__xor2_2        14

   Chip area for module '\baugh': 3598.451200

62. Executing Verilog backend.
Dumping module `\baugh'.

Warnings: 16 unique messages, 16 total
End of script. Logfile hash: f26621b7c5, CPU: user 0.93s system 0.07s, MEM: 29.28 MB peak
Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)
Time spent: 54% 2x abc (1 sec), 8% 17x opt_expr (0 sec), ...
